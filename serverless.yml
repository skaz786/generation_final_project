# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!
# npm install plugins - may need to install plugins


plugins:
  - serverless-python-requirements
  - serverless-iam-roles-per-function
  - serverless-dotenv-plugin

custom:
  pythonRequirements:
    slim: true
    layer: true
    dockerizePip: non-linux


service: team2-etl
useDotenv: true
frameworkVersion: '2'
provider:
  name: aws
  stage: dev
  region: eu-west-1
  runtime: python3.7
  lambdaHashingVersion: 20201221
  iam:
    role: arn:aws:iam::505617246107:role/team-2-execution-role
  vpc:
    securityGroupIds:
      - sg-08915876469706265
    subnetIds:
      - subnet-0abef5f20cc40db46
package:
  individually: false
  include:
    - requirements.txt 
    - src/**
  exclude:
    - "*"
    - "*/**"

functions:
  team2-etl:
    handler: src/team2-etl/handler.handle
    timeout: 900
    layers:
      - !Ref PythonRequirementsLambdaLayer
    events:
      - s3:
          bucket: delon2-team-2-cafe-transactions
          event: s3:ObjectCreated:*
          rules:
            - suffix: .csv
    reservedConcurrency: 1

  hello2-etl:
    handler: src/hello2-etl/hello.hello
    timeout: 900

# service: team2-etl
# # app and org for use with dashboard.serverless.com
# #app: your-app-name
# #org: your-org-name

# # You can pin your service to only deploy with a specific Serverless version
# # Check out our docs for more details
# frameworkVersion: '2'

# provider:
#   name: aws
#   runtime: python3.8
#   lambdaHashingVersion: 20201221
#   stage: dev
#   region: eu-west-1
#   iam:
#     role: arn:aws:iam::505617246107:policy/team-2-execution-role

# # you can add statements to the Lambda function's IAM Role here
# #  iamRoleStatements:
# #    - Effect: "Allow"
# #      Action:
# #        - "s3:ListBucket"
# #      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
# #    - Effect: "Allow"
# #      Action:
# #        - "s3:PutObject"
# #      Resource:
# #        Fn::Join:
# #          - ""
# #          - - "arn:aws:s3:::"
# #            - "Ref" : "ServerlessDeploymentBucket"
# #            - "/*"

# # you can define service wide environment variables here
# #  environment:
# #    variable1: value1

# # you can add packaging information here
# package:
#   individually: false
#   include:
#     - src/**
#   exclude:
#     - "*"
#     - "*/**"

# functions:
#   team2-etl:
#       handler: src/team2-etl/handler.hello
#       timeout: 300
  
# #    The following are a few example events you can configure
# #    NOTE: Please make sure to change your handler code to work with those events
# #    Check the event documentation for details
#       events:
# #      - httpApi:
# #          path: /users/create
# #          method: get
# #      - websocket: $connect
#       - s3: #${env:BUCKET}
#           bucket: team2testbucket
#           event: s3:ObjectCreated:*
#           rules:
#             - suffix .csv

# #      - schedule: rate(10 minutes)
# #      - sns: greeter-topic
# #      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
# #      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
# #      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
# #      - iot:
# #          sql: "SELECT * FROM 'some_topic'"
# #      - cloudwatchEvent:
# #          event:
# #            source:
# #              - "aws.ec2"
# #            detail-type:
# #              - "EC2 Instance State-change Notification"
# #            detail:
# #              state:
# #                - pending
# #      - cloudwatchLog: '/aws/lambda/hello'
# #      - cognitoUserPool:
# #          pool: MyUserPool
# #          trigger: PreSignUp
# #      - alb:
# #          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
# #          priority: 1
# #          conditions:
# #            host: example.com
# #            path: /hello

# #    Define function environment variables here
# #    environment:
# #      variable2: value2

# # you can add CloudFormation resource templates here
# #resources:
# #  Resources:
# #    NewResource:
# #      Type: AWS::S3::Bucket
# #      Properties:
# #        BucketName: my-new-bucket
# #  Outputs:
# #     NewOutput:
# #       Description: "Description for the output"
# #       Value: "Some output value"
